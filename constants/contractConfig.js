// Smart Contract Configuration for Foundry
export const CONTRACT_CONFIG = {
  // Network Configuration
  NETWORKS: {
    MAINNET: {
      id: 1,
      name: 'Ethereum Mainnet',
      rpcUrl: 'https://mainnet.infura.io/v3/YOUR_INFURA_PROJECT_ID',
      explorerUrl: 'https://etherscan.io',
      foundryUrl: 'https://eth-mainnet.g.alchemy.com/v2/YOUR_ALCHEMY_KEY'
    },
    GOERLI: {
      id: 5,
      name: 'Goerli Testnet', 
      rpcUrl: 'https://goerli.infura.io/v3/YOUR_INFURA_PROJECT_ID',
      explorerUrl: 'https://goerli.etherscan.io',
      foundryUrl: 'https://eth-goerli.g.alchemy.com/v2/YOUR_ALCHEMY_KEY'
    },
    SEPOLIA: {
      id: 11155111,
      name: 'Sepolia Testnet',
      rpcUrl: 'https://sepolia.infura.io/v3/YOUR_INFURA_PROJECT_ID', 
      explorerUrl: 'https://sepolia.etherscan.io',
      foundryUrl: 'https://eth-sepolia.g.alchemy.com/v2/YOUR_ALCHEMY_KEY'
    },
    POLYGON: {
      id: 137,
      name: 'Polygon Mainnet',
      rpcUrl: 'https://polygon-rpc.com',
      explorerUrl: 'https://polygonscan.com',
      foundryUrl: 'https://polygon-mainnet.g.alchemy.com/v2/YOUR_ALCHEMY_KEY'
    },
    MUMBAI: {
      id: 80001,
      name: 'Mumbai Testnet',
      rpcUrl: 'https://rpc-mumbai.maticvigil.com',
      explorerUrl: 'https://mumbai.polygonscan.com',
      foundryUrl: 'https://polygon-mumbai.g.alchemy.com/v2/YOUR_ALCHEMY_KEY'
    },
    ANVIL: {
      id: 31337,
      name: 'Anvil Local',
      rpcUrl: 'http://127.0.0.1:8545',
      explorerUrl: null,
      foundryUrl: 'http://127.0.0.1:8545'
    },
    LOCALHOST: {
      id: 1337,
      name: 'Local Development',
      rpcUrl: 'http://127.0.0.1:8545',
      explorerUrl: null,
      foundryUrl: 'http://127.0.0.1:8545'
    }
  },

  // Default network (change this based on deployment)
  DEFAULT_NETWORK_ID: 11155111, // Sepolia testnet (recommended for Foundry)

  // Contract Addresses (will be populated after Foundry deployment)
  CONTRACT_ADDRESSES: {
    1: {
      // Mainnet addresses
      EVENT_RSVP: null
    },
    5: {
      // Goerli addresses  
      EVENT_RSVP: null
    },
    11155111: {
      // Sepolia addresses
      EVENT_RSVP: null
    },
    137: {
      // Polygon addresses
      EVENT_RSVP: null
    },
    80001: {
      // Mumbai addresses
      EVENT_RSVP: null
    },
    31337: {
      // Anvil local addresses
      EVENT_RSVP: null
    },
    1337: {
      // Local development addresses
      EVENT_RSVP: null
    }
  },

  // Foundry Configuration
  FOUNDRY_CONFIG: {
    // Contract artifacts path (generated by forge build)
    ARTIFACTS_PATH: './out',
    
    // Deployment scripts path
    SCRIPT_PATH: './script',
    
    // Foundry profile (can be 'default', 'ci', etc.)
    PROFILE: 'default',
    
    // Gas settings for different operations
    GAS_MULTIPLIER: 1.2, // 20% buffer for gas estimation
  },

  // Get RPC URL for current network
  get RPC_URL() {
    const networkId = this.DEFAULT_NETWORK_ID;
    const network = Object.values(this.NETWORKS).find(n => n.id === networkId);
    return network?.foundryUrl || network?.rpcUrl || this.NETWORKS.ANVIL.rpcUrl;
  },

  // Get contract address for current network
  get EVENT_RSVP_ADDRESS() {
    return this.CONTRACT_ADDRESSES[this.DEFAULT_NETWORK_ID]?.EVENT_RSVP;
  },

  // Contract ABI (Generated by Foundry compilation)
  // Generated from ./out/EventRSVP.sol/EventRSVP.json after running `forge build`
  EVENT_RSVP_ABI: [
    {"type":"constructor","inputs":[],"stateMutability":"nonpayable"},
    {"type":"fallback","stateMutability":"payable"},
    {"type":"receive","stateMutability":"payable"},
    {"type":"function","name":"CANCELLATION_PERIOD","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},
    {"type":"function","name":"MAX_DEPOSIT","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},
    {"type":"function","name":"MIN_DEPOSIT","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},
    {"type":"function","name":"addOrganizer","inputs":[{"name":"_organizer","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},
    {"type":"function","name":"cancelRSVP","inputs":[{"name":"_eventId","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},
    {"type":"function","name":"createEvent","inputs":[{"name":"_name","type":"string","internalType":"string"},{"name":"_description","type":"string","internalType":"string"},{"name":"_eventTimestamp","type":"uint256","internalType":"uint256"},{"name":"_location","type":"string","internalType":"string"},{"name":"_maxAttendees","type":"uint256","internalType":"uint256"},{"name":"_depositAmount","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},
    {"type":"function","name":"deactivateEvent","inputs":[{"name":"_eventId","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},
    {"type":"function","name":"emergencyWithdraw","inputs":[],"outputs":[],"stateMutability":"nonpayable"},
    {"type":"function","name":"eventAttendees","inputs":[{"name":"","type":"uint256","internalType":"uint256"},{"name":"","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},
    {"type":"function","name":"eventRSVPs","inputs":[{"name":"","type":"uint256","internalType":"uint256"},{"name":"","type":"address","internalType":"address"}],"outputs":[{"name":"attendee","type":"address","internalType":"address"},{"name":"depositAmount","type":"uint256","internalType":"uint256"},{"name":"hasAttended","type":"bool","internalType":"bool"},{"name":"isRefunded","type":"bool","internalType":"bool"},{"name":"rsvpTimestamp","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},
    {"type":"function","name":"events","inputs":[{"name":"","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"id","type":"uint256","internalType":"uint256"},{"name":"name","type":"string","internalType":"string"},{"name":"description","type":"string","internalType":"string"},{"name":"eventTimestamp","type":"uint256","internalType":"uint256"},{"name":"location","type":"string","internalType":"string"},{"name":"maxAttendees","type":"uint256","internalType":"uint256"},{"name":"depositAmount","type":"uint256","internalType":"uint256"},{"name":"organizer","type":"address","internalType":"address"},{"name":"isActive","type":"bool","internalType":"bool"},{"name":"isFinalized","type":"bool","internalType":"bool"},{"name":"totalRSVPs","type":"uint256","internalType":"uint256"},{"name":"totalAttended","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},
    {"type":"function","name":"finalizeEvent","inputs":[{"name":"_eventId","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},
    {"type":"function","name":"getEvent","inputs":[{"name":"_eventId","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"tuple","internalType":"struct EventRSVP.Event","components":[{"name":"id","type":"uint256","internalType":"uint256"},{"name":"name","type":"string","internalType":"string"},{"name":"description","type":"string","internalType":"string"},{"name":"eventTimestamp","type":"uint256","internalType":"uint256"},{"name":"location","type":"string","internalType":"string"},{"name":"maxAttendees","type":"uint256","internalType":"uint256"},{"name":"depositAmount","type":"uint256","internalType":"uint256"},{"name":"organizer","type":"address","internalType":"address"},{"name":"isActive","type":"bool","internalType":"bool"},{"name":"isFinalized","type":"bool","internalType":"bool"},{"name":"totalRSVPs","type":"uint256","internalType":"uint256"},{"name":"totalAttended","type":"uint256","internalType":"uint256"}]}],"stateMutability":"view"},
    {"type":"function","name":"getEventAttendees","inputs":[{"name":"_eventId","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},
    {"type":"function","name":"getEventCount","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},
    {"type":"function","name":"getUserEvents","inputs":[{"name":"_user","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256[]","internalType":"uint256[]"}],"stateMutability":"view"},
    {"type":"function","name":"getUserRSVP","inputs":[{"name":"_eventId","type":"uint256","internalType":"uint256"},{"name":"_user","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"tuple","internalType":"struct EventRSVP.RSVP","components":[{"name":"attendee","type":"address","internalType":"address"},{"name":"depositAmount","type":"uint256","internalType":"uint256"},{"name":"hasAttended","type":"bool","internalType":"bool"},{"name":"isRefunded","type":"bool","internalType":"bool"},{"name":"rsvpTimestamp","type":"uint256","internalType":"uint256"}]}],"stateMutability":"view"},
    {"type":"function","name":"hasUserRSVPed","inputs":[{"name":"_eventId","type":"uint256","internalType":"uint256"},{"name":"_user","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},
    {"type":"function","name":"markAttendance","inputs":[{"name":"_eventId","type":"uint256","internalType":"uint256"},{"name":"_attendee","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},
    {"type":"function","name":"organizers","inputs":[{"name":"","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},
    {"type":"function","name":"owner","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},
    {"type":"function","name":"removeOrganizer","inputs":[{"name":"_organizer","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},
    {"type":"function","name":"rsvpToEvent","inputs":[{"name":"_eventId","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"payable"},
    {"type":"function","name":"userEvents","inputs":[{"name":"","type":"address","internalType":"address"},{"name":"","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},
    {"type":"event","name":"AttendanceMarked","inputs":[{"name":"eventId","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"attendee","type":"address","indexed":true,"internalType":"address"},{"name":"attended","type":"bool","indexed":false,"internalType":"bool"}],"anonymous":false},
    {"type":"event","name":"EventCreated","inputs":[{"name":"eventId","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"organizer","type":"address","indexed":true,"internalType":"address"},{"name":"name","type":"string","indexed":false,"internalType":"string"},{"name":"eventTimestamp","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"maxAttendees","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"depositAmount","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},
    {"type":"event","name":"EventFinalized","inputs":[{"name":"eventId","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"totalDepositsDistributed","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"noShowCount","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},
    {"type":"event","name":"RSVPCancelled","inputs":[{"name":"eventId","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"attendee","type":"address","indexed":true,"internalType":"address"},{"name":"refundAmount","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},
    {"type":"event","name":"RSVPConfirmed","inputs":[{"name":"eventId","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"attendee","type":"address","indexed":true,"internalType":"address"},{"name":"depositAmount","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false}
  ],

  // Gas Settings
  GAS_SETTINGS: {
    CREATE_EVENT: {
      gasLimit: 500000,
      gasPrice: null // Will use network gas price
    },
    RSVP_EVENT: {
      gasLimit: 200000,
      gasPrice: null
    },
    CANCEL_RSVP: {
      gasLimit: 150000,
      gasPrice: null
    },
    MARK_ATTENDANCE: {
      gasLimit: 100000,
      gasPrice: null
    }
  },

  // Transaction Confirmation Settings
  CONFIRMATION_BLOCKS: 2,
  TRANSACTION_TIMEOUT: 300000, // 5 minutes

  // Error Messages
  ERROR_MESSAGES: {
    NO_WALLET: 'No Web3 wallet detected. Please install MetaMask or another Web3 wallet.',
    WRONG_NETWORK: 'Please switch to the correct network.',
    INSUFFICIENT_FUNDS: 'Insufficient funds for this transaction.',
    USER_REJECTED: 'Transaction was rejected by user.',
    CONTRACT_ERROR: 'Smart contract error occurred.',
    NETWORK_ERROR: 'Network error occurred.',
    TIMEOUT: 'Transaction timeout.',
    CONTRACT_NOT_DEPLOYED: 'Contract not deployed on this network.',
    FOUNDRY_NOT_INITIALIZED: 'Foundry project not initialized.'
  },

  // Foundry Command Templates
  FOUNDRY_COMMANDS: {
    // Build contracts
    BUILD: 'forge build',
    
    // Test contracts
    TEST: 'forge test',
    
    // Deploy contract (template - replace placeholders)
    DEPLOY: 'forge create --rpc-url {RPC_URL} --private-key {PRIVATE_KEY} src/EventRSVP.sol:EventRSVP',
    
    // Verify contract (template)
    VERIFY: 'forge verify-contract --chain-id {CHAIN_ID} --compiler-version {COMPILER_VERSION} {CONTRACT_ADDRESS} src/EventRSVP.sol:EventRSVP {ETHERSCAN_API_KEY}',
    
    // Start local Anvil node
    ANVIL_START: 'anvil --host 0.0.0.0 --port 8545',
    
    // Cast commands for contract interaction
    CAST_CALL: 'cast call {CONTRACT_ADDRESS} "{FUNCTION_SIGNATURE}" --rpc-url {RPC_URL}',
    CAST_SEND: 'cast send {CONTRACT_ADDRESS} "{FUNCTION_SIGNATURE}" --rpc-url {RPC_URL} --private-key {PRIVATE_KEY}'
  }
};

// Helper functions
export const getNetworkById = (networkId) => {
  return Object.values(CONTRACT_CONFIG.NETWORKS).find(network => network.id === networkId);
};

export const getContractAddress = (networkId, contractName = 'EVENT_RSVP') => {
  return CONTRACT_CONFIG.CONTRACT_ADDRESSES[networkId]?.[contractName];
};

export const isNetworkSupported = (networkId) => {
  return Object.values(CONTRACT_CONFIG.NETWORKS).some(network => network.id === networkId);
};

export default CONTRACT_CONFIG;