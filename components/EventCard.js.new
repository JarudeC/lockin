'use client';

import Link from 'next/link';
import { useState } from 'react';
import { useWallet } from '../hooks/useWallet';
import RSVPButton from './RSVPButton';
import { formatDate, formatTimeRange } from '../utils/helpers';

export default function EventCard({ event }) {
  const { isAdmin } = useWallet();
  const [isFlipped, setIsFlipped] = useState(false);
  const progressPercentage = (event.currentAttendees / event.maxAttendees) * 100;
  const isNearCapacity = progressPercentage > 80;
  const isFull = event.currentAttendees >= event.maxAttendees;

  const formatShortDate = (dateString) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', {
      weekday: 'short',
      month: 'short',
      day: 'numeric'
    });
  };

  const handleFlip = (e) => {
    e.preventDefault();
    setIsFlipped(!isFlipped);
  };

  return (
    <div 
      className={`card-flip ${isFlipped ? 'flipped' : ''}`}
      style={{ width: '100%', height: isFlipped ? '500px' : '300px' }}
    >
      <div className="card-inner">
        {/* Front of the card */}
        <div className="card-front bg-white rounded-lg shadow-md border border-gray-200 p-6">
          <div className="flex justify-between items-start mb-3">
            <div className="flex-1">
              <h3 className="text-lg font-semibold text-gray-900 mb-2">
                {event.name}
              </h3>
              <button 
                onClick={handleFlip}
                className="text-sm text-indigo-600 hover:text-indigo-700 font-medium"
              >
                View Details â†’
              </button>
            </div>
            <div className="flex flex-col items-end">
              <span className="bg-green-100 text-green-800 text-xs font-bold px-2 py-1 rounded-full">
                {event.depositAmount} ETH
              </span>
              {isFull && (
                <span className="bg-red-100 text-red-800 text-xs font-medium px-2 py-1 rounded-full mt-1">
                  FULL
                </span>
              )}
            </div>
          </div>

          <div className="space-y-2 mt-4">
            <div className="flex items-center text-sm text-gray-500">
              <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
              </svg>
              <span>{formatShortDate(event.date)}</span>
            </div>
            <div className="flex items-center text-sm text-gray-500">
              <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
              </svg>
              <span>{event.location}</span>
            </div>
          </div>

          <div className="mt-4">
            <div className="flex justify-between text-xs text-gray-500 mb-1">
              <span>Capacity</span>
              <span>{Math.round(progressPercentage)}%</span>
            </div>
            <div className="w-full bg-gray-200 rounded-full h-2">
              <div 
                className={`h-2 rounded-full transition-all duration-300 ${
                  isFull ? 'bg-red-500' : isNearCapacity ? 'bg-yellow-500' : 'bg-indigo-600'
                }`}
                style={{ width: `${Math.min(progressPercentage, 100)}%` }}
              ></div>
            </div>
          </div>
        </div>

        {/* Back of the card */}
        <div className="card-back bg-white rounded-lg shadow-lg border border-gray-200 p-6">
          <button 
            onClick={handleFlip}
            className="absolute top-4 right-4 text-gray-400 hover:text-gray-600"
          >
            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>

          <div className="mb-6">
            <h2 className="text-2xl font-bold text-gray-900 mb-2">{event.name}</h2>
            <p className="text-gray-600">{event.description}</p>
          </div>

          <div className="grid grid-cols-2 gap-4 mb-6">
            <div className="bg-gray-50 p-3 rounded-lg">
              <div className="text-sm font-medium text-gray-500">Date</div>
              <div className="text-gray-900">{formatDate(event.date)}</div>
            </div>
            <div className="bg-gray-50 p-3 rounded-lg">
              <div className="text-sm font-medium text-gray-500">Location</div>
              <div className="text-gray-900">{event.location}</div>
            </div>
            <div className="bg-gray-50 p-3 rounded-lg">
              <div className="text-sm font-medium text-gray-500">Deposit</div>
              <div className="text-gray-900">{event.depositAmount} ETH</div>
            </div>
            <div className="bg-gray-50 p-3 rounded-lg">
              <div className="text-sm font-medium text-gray-500">Capacity</div>
              <div className="text-gray-900">{event.currentAttendees}/{event.maxAttendees}</div>
            </div>
          </div>

          <div className="mb-6">
            <div className="text-sm font-medium text-gray-500 mb-2">Event Status</div>
            <div className="flex gap-2 flex-wrap">
              {event.isActive && (
                <span className="bg-green-100 text-green-800 text-xs font-medium px-2.5 py-0.5 rounded-full">
                  Active
                </span>
              )}
              {isFull && (
                <span className="bg-red-100 text-red-800 text-xs font-medium px-2.5 py-0.5 rounded-full">
                  Fully Booked
                </span>
              )}
              {isNearCapacity && !isFull && (
                <span className="bg-yellow-100 text-yellow-800 text-xs font-medium px-2.5 py-0.5 rounded-full">
                  Almost Full
                </span>
              )}
            </div>
          </div>

          <div className="flex gap-2">
            {!isAdmin && (
              <RSVPButton event={event} size="lg" fullWidth />
            )}
            {isAdmin && (
              <Link 
                href={`/admin/${event.id}`}
                className="w-full bg-purple-100 hover:bg-purple-200 text-purple-800 py-3 px-4 rounded-lg font-medium transition-colors text-center"
              >
                Manage Event
              </Link>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}
