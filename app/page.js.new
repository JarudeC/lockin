'use client';
import EventCount from '../components/EventCount';
import { useState, useEffect } from 'react';
import Link from 'next/link';
import EventCard from '../components/EventCard';
import { CardSkeleton } from '../components/LoadingSpinner';
import Input from '../components/ui/Input';

export default function Home() {
  const [events, setEvents] = useState([]);
  const [isEventsLoading, setIsEventsLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');

  useEffect(() => {
    async function fetchEvents() {
      if (typeof window === 'undefined') return;
      
      setIsEventsLoading(true);
      try {
        const { contractService } = await import('../utils/contract');
        await contractService.init();
        const fetchedEvents = await contractService.getAllEvents();
        const formattedEvents = fetchedEvents.map(event => ({
          id: event.id,
          name: event.name,
          description: event.description,
          date: new Date(event.timestamp * 1000).toISOString().slice(0, 10),
          location: event.location,
          maxAttendees: event.maxAttendees,
          depositAmount: event.deposit,
          organizer: event.owner,
          isActive: !event.isFinalized,
          isFinalized: event.isFinalized,
          totalRSVPs: event.currentAttendees,
          totalAttended: event.currentAttendees,
          category: '',
          attendees: [],
          currentAttendees: event.currentAttendees
        }));
        setEvents(formattedEvents);
      } catch (error) {
        console.error('Error fetching events:', error);
      } finally {
        setIsEventsLoading(false);
      }
    }

    fetchEvents();
  }, []);

  const filteredEvents = events.filter(event =>
    event.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    event.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
    event.location.toLowerCase().includes(searchTerm.toLowerCase())
  );

  return (
    <main className="flex min-h-screen flex-col items-center p-4 md:p-24 bg-gray-50">
      <div className="w-full max-w-7xl">
        <div className="flex flex-col items-center mb-12">
          <h1 className="text-4xl font-bold mb-4">Welcome to LockIn</h1>
          <p className="text-xl text-gray-600 mb-8 text-center">
            Join exciting events with secure RSVPs using cryptocurrency deposits
          </p>
          <div className="flex flex-wrap gap-4 justify-center">
            <Link
              href="/create-event"
              className="bg-indigo-600 text-white px-6 py-3 rounded-lg hover:bg-indigo-700 transition-colors"
            >
              Create Event
            </Link>
            <Link
              href="/events"
              className="bg-white text-indigo-600 border-2 border-indigo-600 px-6 py-3 rounded-lg hover:bg-indigo-50 transition-colors"
            >
              Browse All Events
            </Link>
          </div>
        </div>

        <div className="mb-8">
          <Input
            type="text"
            placeholder="Search events..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="w-full max-w-xl mx-auto"
          />
        </div>

        {isEventsLoading ? (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {[...Array(6)].map((_, i) => (
              <CardSkeleton key={i} />
            ))}
          </div>
        ) : filteredEvents.length > 0 ? (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {filteredEvents.map((event) => (
              <EventCard key={event.id} event={event} />
            ))}
          </div>
        ) : (
          <div className="text-center text-gray-500 mt-8">
            No events found
          </div>
        )}
      </div>
    </main>
  );
}
